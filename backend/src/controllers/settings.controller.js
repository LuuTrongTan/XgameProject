import User from "../models/user.model.js";

// üìå 1. L·∫•y c√†i ƒë·∫∑t ng∆∞·ªùi d√πng
export const getUserSettings = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select(
      "workingHours notificationPreferences calendarIntegration emailNotifications"
    );

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
    }

    res.json({
      success: true,
      data: {
        workingHours: user.workingHours,
        notificationPreferences: user.notificationPreferences,
        calendarIntegration: user.calendarIntegration,
        emailNotifications: user.emailNotifications,
      },
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y c√†i ƒë·∫∑t:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y c√†i ƒë·∫∑t ng∆∞·ªùi d√πng",
      error: error.message,
    });
  }
};

// üìå 2. C·∫≠p nh·∫≠t c√†i ƒë·∫∑t chung
export const updateGeneralSettings = async (req, res) => {
  try {
    const { workingHours, emailNotifications } = req.body;
    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
    }

    // C·∫≠p nh·∫≠t gi·ªù l√†m vi·ªác
    if (workingHours) {
      if (workingHours.startTime)
        user.workingHours.startTime = workingHours.startTime;
      if (workingHours.endTime)
        user.workingHours.endTime = workingHours.endTime;
      if (workingHours.timezone)
        user.workingHours.timezone = workingHours.timezone;
    }

    // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t email
    if (typeof emailNotifications === "boolean") {
      user.emailNotifications = emailNotifications;
    }

    await user.save();

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√†nh c√¥ng",
      data: {
        workingHours: user.workingHours,
        emailNotifications: user.emailNotifications,
      },
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t",
      error: error.message,
    });
  }
};

// üìå 3. C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o
export const updateNotificationSettings = async (req, res) => {
  try {
    const { email, inApp } = req.body;
    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
    }

    // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o email
    if (email) {
      user.notificationPreferences.email = {
        ...user.notificationPreferences.email,
        ...email,
      };
    }

    // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o trong ·ª©ng d·ª•ng
    if (inApp) {
      user.notificationPreferences.inApp = {
        ...user.notificationPreferences.inApp,
        ...inApp,
      };
    }

    await user.save();

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o th√†nh c√¥ng",
      data: user.notificationPreferences,
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o",
      error: error.message,
    });
  }
};

// üìå 4. C·∫≠p nh·∫≠t t√≠ch h·ª£p l·ªãch
export const updateCalendarIntegration = async (req, res) => {
  try {
    const { provider, connected, refreshToken, accessToken, expiryDate } =
      req.body;
    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
    }

    // Ki·ªÉm tra provider h·ª£p l·ªá
    if (!["googleCalendar", "outlookCalendar"].includes(provider)) {
      return res.status(400).json({
        success: false,
        message: "Provider kh√¥ng h·ª£p l·ªá",
      });
    }

    // Kh·ªüi t·∫°o calendarIntegration n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!user.calendarIntegration) {
      user.calendarIntegration = {
        googleCalendar: {
          connected: false,
          refreshToken: null,
          accessToken: null,
          expiryDate: null
        },
        outlookCalendar: {
          connected: false,
          refreshToken: null,
          accessToken: null,
          expiryDate: null
        }
      };
    }

    // Kh·ªüi t·∫°o provider n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!user.calendarIntegration[provider]) {
      user.calendarIntegration[provider] = {
        connected: false,
        refreshToken: null,
        accessToken: null,
        expiryDate: null
      };
    }

    // C·∫≠p nh·∫≠t th√¥ng tin t√≠ch h·ª£p
    user.calendarIntegration[provider] = {
      connected: connected ?? user.calendarIntegration[provider].connected,
      refreshToken:
        refreshToken ?? user.calendarIntegration[provider].refreshToken,
      accessToken:
        accessToken ?? user.calendarIntegration[provider].accessToken,
      expiryDate: expiryDate ?? user.calendarIntegration[provider].expiryDate,
    };

    await user.save();

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t t√≠ch h·ª£p l·ªãch th√†nh c√¥ng",
      data: user.calendarIntegration,
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t t√≠ch h·ª£p l·ªãch:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t t√≠ch h·ª£p l·ªãch",
      error: error.message,
    });
  }
};

// üìå 5. Ng·∫Øt k·∫øt n·ªëi l·ªãch
export const disconnectCalendar = async (req, res) => {
  try {
    const { provider } = req.params;
    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
      });
    }

    // Ki·ªÉm tra provider h·ª£p l·ªá
    if (!["googleCalendar", "outlookCalendar"].includes(provider)) {
      return res.status(400).json({
        success: false,
        message: "Provider kh√¥ng h·ª£p l·ªá",
      });
    }

    // Kh·ªüi t·∫°o calendarIntegration n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!user.calendarIntegration) {
      user.calendarIntegration = {
        googleCalendar: {
          connected: false,
          refreshToken: null,
          accessToken: null,
          expiryDate: null
        },
        outlookCalendar: {
          connected: false,
          refreshToken: null,
          accessToken: null,
          expiryDate: null
        }
      };
    }

    // Kh·ªüi t·∫°o provider n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!user.calendarIntegration[provider]) {
      user.calendarIntegration[provider] = {
        connected: false,
        refreshToken: null,
        accessToken: null,
        expiryDate: null
      };
    }

    // Reset th√¥ng tin t√≠ch h·ª£p
    user.calendarIntegration[provider] = {
      connected: false,
      refreshToken: null,
      accessToken: null,
      expiryDate: null,
    };

    await user.save();

    res.json({
      success: true,
      message: "ƒê√£ ng·∫Øt k·∫øt n·ªëi l·ªãch th√†nh c√¥ng",
      data: user.calendarIntegration,
    });
  } catch (error) {
    console.error("L·ªói khi ng·∫Øt k·∫øt n·ªëi l·ªãch:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi ng·∫Øt k·∫øt n·ªëi l·ªãch",
      error: error.message,
    });
  }
};
